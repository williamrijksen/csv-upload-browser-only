import Head from "next/head";
import localFont from "next/font/local";
import styles from "@/styles/Home.module.css";
import { ChangeEventHandler, useState } from "react";
import Papa from "papaparse";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export default function Home() {
  const [data, setData] = useState([]);
  const [error, setError] = useState("");

  const handleFileChange: ChangeEventHandler<HTMLInputElement> = (e) => {
    const file = e.target.files![0];
    if (!file) {
      setError("Select a CSV file!");
      return;
    }

    setError("");
    setData([]);

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: (results: { data: string[][] }) => {
        const parsedData = results.data;

        // Check if the data has one column and validate emails
        const isHeaderPresent = Object.keys(parsedData[0] || {}).length > 0;
        const columnName = isHeaderPresent ? Object.keys(parsedData[0])[0] : "email";
        const emails: string[] = parsedData.map((row): string =>
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            isHeaderPresent ? row[columnName] : row[Object.keys(row)[0]]
        );

        if (emails.length === 0 ) {
          setError(
              `Invalid CSV format! Ensure the file contains one column with valid email addresses.`
          );
          return;
        }

        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        setData(emails);
      },
      error: (err: unknown) => {
        setError(`Error parsing CSV: ${err}`);
      },
    });
  };

  return (
      <>
        <Head>
          <title>Upload CSV Example</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div
            className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
        >
          <main className={styles.main}>
            <div style={{ padding: "20px" }}>
              <h1>Upload a CSV-file</h1>
              <input type="file" accept=".csv" onChange={handleFileChange} />
              {error && <p style={{ color: "red" }}>{error}</p>}
              {data.length > 0 && (
                  <div>
                    <h2>Valid Email Addresses:</h2>
                    <pre>{JSON.stringify(data, null, 2)}</pre>
                  </div>
              )}
            </div>
          </main>
        </div>
      </>
  );
}
